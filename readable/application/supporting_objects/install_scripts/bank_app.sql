  CREATE TABLE "CURRENCY_LOOKUP" 
   (	"CURRENCY_CODE" VARCHAR2(3), 
	"CURRENCY_NAME" VARCHAR2(50), 
	"SYMBOL" VARCHAR2(5), 
	 PRIMARY KEY ("CURRENCY_CODE")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_ACCOUNTS" 
   (	"ACCOUNT_NUMBER" VARCHAR2(20), 
	"CUSTOMER_ID" NUMBER NOT NULL ENABLE, 
	"ACCOUNT_TYPE" VARCHAR2(20) NOT NULL ENABLE, 
	"BALANCE" NUMBER(12,2) DEFAULT 0 NOT NULL ENABLE, 
	"CURRENCY_CODE" VARCHAR2(25), 
	"CREATED_AT" DATE DEFAULT SYSDATE, 
	 PRIMARY KEY ("ACCOUNT_NUMBER")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_CUSTOMERS" 
   (	"CUSTOMER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FULL_NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(100) NOT NULL ENABLE, 
	"PHONE" VARCHAR2(20) NOT NULL ENABLE, 
	"ADDRESS" VARCHAR2(255) NOT NULL ENABLE, 
	"GENDER" VARCHAR2(10) NOT NULL ENABLE, 
	"USER_NAME" VARCHAR2(50), 
	"PASSWORD" VARCHAR2(128), 
	"LAST_LOGIN" DATE DEFAULT SYSDATE, 
	 PRIMARY KEY ("CUSTOMER_ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("EMAIL")
  USING INDEX  ENABLE, 
	 UNIQUE ("PHONE")
  USING INDEX  ENABLE, 
	 UNIQUE ("USER_NAME")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_CUSTOM_USERS" 
   (	"USER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"USERNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"PASSWORD_HASH" VARCHAR2(200) NOT NULL ENABLE, 
	"ROLE" VARCHAR2(30), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"IS_ACTIVE" VARCHAR2(3) DEFAULT 'Y' -- 'Y' or 'N'
, 
	 PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("USERNAME")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_LOGIN_HISTORY" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"USERNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"LOGIN_TIME" TIMESTAMP (6) NOT NULL ENABLE, 
	"STATUS" VARCHAR2(30) NOT NULL ENABLE, 
	"IP_ADDRESS" VARCHAR2(45), 
	"USER_AGENT" VARCHAR2(200), 
	 CONSTRAINT "CHK_STATUS" CHECK (status IN ('SUCCESSFUL LOGIN', 'LOGIN ATTEMPT FAILED')) ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_SERVICE_REQUESTS" 
   (	"REQUEST_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUSTOMER_ID" NUMBER, 
	"REQUEST_TYPE" VARCHAR2(50), 
	"REQUEST_DATE" DATE DEFAULT SYSDATE, 
	"STATUS" VARCHAR2(20) DEFAULT 'Pending', 
	 PRIMARY KEY ("REQUEST_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_SERVICE_REQUESTS_LOOKUP" 
   (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SERVICE_NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"SERVICE_CODE" VARCHAR2(50) NOT NULL ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("SERVICE_CODE")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MAXWELL_TRANSACTIONS" 
   (	"TRANSACTION_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ACCOUNT_NUMBER" VARCHAR2(20), 
	"TRANSACTION_TYPE" VARCHAR2(20) NOT NULL ENABLE, 
	"AMOUNT" NUMBER(12,2) NOT NULL ENABLE, 
	"TRANSACTION_DATE" DATE DEFAULT SYSDATE, 
	"REMARKS" VARCHAR2(255), 
	"RELATED_ACCOUNT" VARCHAR2(20), 
	"TELLER_ID" NUMBER, 
	"TRANSFER_TYPE" VARCHAR2(50), 
	 PRIMARY KEY ("TRANSACTION_ID")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "MAXWELL_ACCOUNTS" ADD FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "MAXWELL_CUSTOMERS" ("CUSTOMER_ID") ENABLE;
  ALTER TABLE "MAXWELL_ACCOUNTS" ADD CONSTRAINT "FK_CURRENCY_CODE" FOREIGN KEY ("CURRENCY_CODE")
	  REFERENCES "CURRENCY_LOOKUP" ("CURRENCY_CODE") ENABLE;

  ALTER TABLE "MAXWELL_SERVICE_REQUESTS" ADD FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "MAXWELL_CUSTOMERS" ("CUSTOMER_ID") ENABLE;

  ALTER TABLE "MAXWELL_TRANSACTIONS" ADD FOREIGN KEY ("ACCOUNT_NUMBER")
	  REFERENCES "MAXWELL_ACCOUNTS" ("ACCOUNT_NUMBER") ENABLE;
  ALTER TABLE "MAXWELL_TRANSACTIONS" ADD CONSTRAINT "FK_TELLER_ID" FOREIGN KEY ("TELLER_ID")
	  REFERENCES "MAXWELL_CUSTOM_USERS" ("USER_ID") ENABLE;
create or replace FUNCTION get_user_role(p_username IN VARCHAR2)
RETURN VARCHAR2
IS
  v_role VARCHAR2(30);
BEGIN
  SELECT role 
    INTO v_role
    FROM maxwell_custom_users
   WHERE username = p_username;

  RETURN v_role;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;  -- or raise an error or return a default role
  WHEN OTHERS THEN
    RAISE;
END get_user_role;
/
create or replace FUNCTION maxwell_get_user_role(p_username IN VARCHAR2)
RETURN VARCHAR2
IS
  v_role VARCHAR2(30);
BEGIN
  SELECT role 
    INTO v_role
    FROM maxwell_custom_users
   WHERE username = p_username;

  RETURN v_role;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;  -- or raise an error or return a default role
  WHEN OTHERS THEN
    RAISE;
END maxwell_get_user_role;
/
create or replace FUNCTION max_custom_auth (
    p_username IN VARCHAR2,
    p_password IN VARCHAR2
) RETURN BOOLEAN IS
    l_hash      VARCHAR2(200);
    l_input_raw RAW(2000);
    l_hash_raw  RAW(2000);
BEGIN
    SELECT password_hash
    INTO l_hash
    FROM maxwell_custom_users
    WHERE username = p_username AND is_active = 'Y';

    -- Convert password to RAW and hash using DBMS_CRYPTO
    l_input_raw := UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8');
    l_hash_raw := DBMS_CRYPTO.HASH(l_input_raw, DBMS_CRYPTO.HASH_SH256); -- or HASH_MD5, HASH_SH1 etc.

    RETURN RAWTOHEX(l_hash_raw) = l_hash;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
END;
/
create or replace FUNCTION validate_transfer(
    p_transfer_type        IN VARCHAR2,
    p_account_number_from  IN VARCHAR2,
    p_account_number_to    IN VARCHAR2
) RETURN VARCHAR2
IS
    v_from_customer_id maxwell_accounts.customer_id%TYPE;
    v_to_customer_id   maxwell_accounts.customer_id%TYPE;
    v_from_currency    maxwell_accounts.currency_code%TYPE;
    v_to_currency      maxwell_accounts.currency_code%TYPE;
BEGIN
    -- Fetch source account info
    SELECT customer_id, currency_code
    INTO v_from_customer_id, v_from_currency
    FROM maxwell_accounts
    WHERE account_number = p_account_number_from;

    -- Fetch target account info
    SELECT customer_id, currency_code
    INTO v_to_customer_id, v_to_currency
    FROM maxwell_accounts
    WHERE account_number = p_account_number_to;

    -- Check currency code matches
    IF v_from_currency != v_to_currency THEN
        RETURN 'Validation failed: Currency codes do not match.';
    END IF;

    -- Check transfer type constraints
    IF p_transfer_type = 'INTRA' THEN
        IF v_from_customer_id != v_to_customer_id THEN
            RETURN 'Validation failed: For INTRA transfers, accounts must belong to the same customer.';
        END IF;
    ELSIF p_transfer_type = 'INTER' THEN
        IF v_from_customer_id = v_to_customer_id THEN
            RETURN 'Validation failed: For INTER transfers, accounts must belong to different customers.';
        END IF;
    ELSE
        RETURN 'Validation failed: Invalid transfer type specified.';
    END IF;

    RETURN 'Validation successful.';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Validation failed: One or both account numbers do not exist.';
    WHEN OTHERS THEN
        RETURN 'Validation failed: ' || SQLERRM;
END validate_transfer;
/



























create or replace PACKAGE maxwell_account_api AS

  -- Generate 10-digit account number starting with '1234567' + 3 random digits
  FUNCTION gen_acc RETURN VARCHAR2;

  PROCEDURE open_account(
    p_acc_no          IN VARCHAR2 DEFAULT gen_acc,
    p_customer_id     IN VARCHAR2,
    p_type            IN VARCHAR2,
    p_initial_balance IN NUMBER,
    p_currency_code   IN VARCHAR2
  );

  PROCEDURE edit_account(
    p_acc_no        IN VARCHAR2,
    p_customer_id   IN VARCHAR2,
    p_new_type      IN VARCHAR2
  );

END maxwell_account_api;
/
create or replace PACKAGE maxwell_auth_api AS
  FUNCTION login(p_username VARCHAR2, p_password VARCHAR2) RETURN BOOLEAN;
  FUNCTION get_user_role(p_username VARCHAR2) RETURN VARCHAR2;
  PROCEDURE change_password(p_username VARCHAR2, p_old_password VARCHAR2, p_new_password VARCHAR2);
END maxwell_auth_api;
/
create or replace package maxwell_auth_pkg as
   function authenticate_user (
      p_username varchar2,
      p_password varchar2
   ) return boolean;
   function get_user_roles (
      p_username varchar2
   ) return varchar2;
   function hash_password (
      p_password varchar2
   ) return varchar2;
   procedure create_user (
      p_password maxwell_custom_users.password_hash%type,
      p_username maxwell_custom_users.username%type,
      p_role     maxwell_custom_users.role%type
   );
   function verify_user(
    p_username maxwell_custom_users.username%type
   ) return varchar2;

end maxwell_auth_pkg;
/
create or replace PACKAGE maxwell_customer_api AS

  -- Constants for login status
  c_status_success CONSTANT VARCHAR2(30) := 'SUCCESSFUL LOGIN';
  c_status_failure CONSTANT VARCHAR2(30) := 'LOGIN ATTEMPT FAILED';

  -- Hash password using SHA-512
  FUNCTION hash_password(p_password VARCHAR2) RETURN VARCHAR2;

  -- Add a new customer
  PROCEDURE add_customer(
    p_name     VARCHAR2,
    p_email    VARCHAR2,
    p_phone    VARCHAR2,
    p_address  VARCHAR2,
    p_gender   VARCHAR2,
    p_username VARCHAR2 DEFAULT NULL,
    p_password VARCHAR2 DEFAULT NULL
  );

  -- Update an existing customer
  PROCEDURE update_customer(
    p_id       NUMBER,
    p_name     VARCHAR2,
    p_email    VARCHAR2,
    p_phone    VARCHAR2,
    p_address  VARCHAR2,
    p_gender   VARCHAR2,
    p_username VARCHAR2 DEFAULT NULL,
    p_password VARCHAR2 DEFAULT NULL
  );

  -- Log login attempt
  PROCEDURE log_login_attempt(
    p_username   VARCHAR2,
    p_success    BOOLEAN,
    p_ip_address VARCHAR2 DEFAULT NULL,
    p_user_agent VARCHAR2 DEFAULT NULL
  );

  -- Authenticate user
  FUNCTION authenticate_user(
    p_username VARCHAR2,
    p_password VARCHAR2
  ) RETURN BOOLEAN;

  -- Change password
  PROCEDURE change_password(
    p_username         VARCHAR2,
    p_current_password VARCHAR2,
    p_new_password     VARCHAR2
  );

END maxwell_customer_api;
/
create or replace PACKAGE maxwell_service_pkg IS
  PROCEDURE insert_service_request(
    p_request_type IN VARCHAR2
  );

  PROCEDURE delete_service_request(
    p_request_id IN maxwell_service_requests.request_id%TYPE
  );
END maxwell_service_pkg;
/
create or replace PACKAGE maxwell_transaction_api AS

  PROCEDURE deposit(
    p_acc_no    VARCHAR2,
    p_amount    NUMBER,
    p_remarks   VARCHAR2,
    p_teller_id NUMBER
  );

  PROCEDURE withdraw(
    p_acc_no    VARCHAR2,
    p_amount    NUMBER,
    p_remarks   VARCHAR2,
    p_teller_id NUMBER
  );

  PROCEDURE transfer(
    p_from_acc      VARCHAR2,
    p_to_acc        VARCHAR2,
    p_amount        NUMBER,
    p_transfer_type VARCHAR2 -- 'INTRA' or 'INTER'
  );

  PROCEDURE log_transaction(
    p_acc_no           VARCHAR2,
    p_amount           NUMBER,
    p_type             VARCHAR2,
    p_date             DATE DEFAULT SYSDATE,
    p_remarks          VARCHAR2,
    p_related_acc_no   VARCHAR2 DEFAULT NULL,
    p_teller_id        NUMBER   DEFAULT NULL
  );

END maxwell_transaction_api;
/


















































create or replace PACKAGE BODY maxwell_account_api AS

  FUNCTION gen_acc RETURN VARCHAR2 IS
    v_acc_no VARCHAR2(10);
    v_base_digits VARCHAR2(9);
    v_check_digit NUMBER;
    v_weights SYS.OdciNumberList := SYS.OdciNumberList(3,7,3,3,7,3,3,7,3);
    v_sum NUMBER := 0;
  BEGIN
    v_base_digits := '123';

    v_base_digits := v_base_digits || LPAD(TRUNC(DBMS_RANDOM.VALUE(0, 1000000)), 6, '0');

    FOR i IN 1..9 LOOP
      v_sum := v_sum + TO_NUMBER(SUBSTR(v_base_digits, i, 1)) * v_weights(i);
    END LOOP;

    v_check_digit := MOD(10 - MOD(v_sum, 10), 10);

    v_acc_no := v_base_digits || TO_CHAR(v_check_digit);

    RETURN v_acc_no;
  END gen_acc;

  PROCEDURE open_account(
    p_acc_no          IN VARCHAR2,
    p_customer_id     IN VARCHAR2,
    p_type            IN VARCHAR2,
    p_initial_balance IN NUMBER,
    p_currency_code   IN VARCHAR2
  ) IS
  BEGIN
    INSERT INTO maxwell_accounts (
      account_number,
      customer_id,
      account_type,
      balance,
      currency_code,
      created_at
    ) VALUES (
      p_acc_no,
      p_customer_id,
      p_type,
      p_initial_balance,
      p_currency_code,
      SYSDATE
    );
  END open_account;

  PROCEDURE edit_account(
    p_acc_no        IN VARCHAR2,
    p_customer_id   IN VARCHAR2,
    p_new_type      IN VARCHAR2
  ) IS
  BEGIN
    UPDATE maxwell_accounts
    SET account_type = p_new_type
    WHERE account_number = p_acc_no
      AND customer_id = p_customer_id;
  END edit_account;

END maxwell_account_api;
/

create or replace PACKAGE BODY maxwell_auth_pkg AS

   -- Convert password to RAW and hash it using SHA512
   FUNCTION hash_password (
      p_password VARCHAR2
   ) RETURN VARCHAR2 IS
      l_raw   RAW(2000);
      l_hash  RAW(2000);
   BEGIN
      l_raw := UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8');
      l_hash := DBMS_CRYPTO.HASH(l_raw, DBMS_CRYPTO.HASH_SH512);
      RETURN RAWTOHEX(l_hash);
   END hash_password;

   -- Authenticate user only if is_active = 'YES'
   FUNCTION authenticate_user (
      p_username VARCHAR2,
      p_password VARCHAR2
   ) RETURN BOOLEAN IS
      l_stored_hash VARCHAR2(255);
      l_is_active   VARCHAR2(3);
   BEGIN
      SELECT password_hash, is_active
        INTO l_stored_hash, l_is_active
        FROM maxwell_custom_users
       WHERE UPPER(username) = UPPER(p_username);

      IF l_stored_hash = hash_password(p_password) AND l_is_active = 'YES' THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN FALSE;
   END authenticate_user;

   -- Get role(s) of a user
   FUNCTION get_user_roles (
      p_username VARCHAR2
   ) RETURN VARCHAR2 IS
      l_roles VARCHAR2(4000);
   BEGIN
      SELECT role
        INTO l_roles
        FROM maxwell_custom_users
       WHERE UPPER(username) = UPPER(p_username);

      RETURN l_roles;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN NULL;
   END get_user_roles;

   -- Create a new user with default is_active = 'NO'
   PROCEDURE create_user (
      p_password maxwell_custom_users.password_hash%TYPE,
      p_username maxwell_custom_users.username%TYPE,
      p_role     maxwell_custom_users.role%TYPE
   ) AS
   BEGIN
      INSERT INTO maxwell_custom_users (
         password_hash,
         username,
         role,
         is_active
      ) VALUES (
         hash_password(p_password),
         p_username,
         p_role,
         'NO'  -- default inactive status
      );
   END create_user;

   -- Verify whether the user exists
   FUNCTION verify_user (
      p_username maxwell_custom_users.username%TYPE
   ) RETURN VARCHAR2 AS
      v_exist NUMBER := 0;
   BEGIN
      SELECT COUNT(*)
        INTO v_exist
        FROM maxwell_custom_users
       WHERE UPPER(username) = UPPER(p_username);

      RETURN CASE WHEN v_exist = 0 THEN 'F' ELSE 'T' END;
   END verify_user;

END maxwell_auth_pkg;
/
create or replace PACKAGE BODY maxwell_customer_api AS


  -- Hash password using SHA-512
  FUNCTION hash_password(p_password VARCHAR2) RETURN VARCHAR2 IS
    l_hash RAW(64);
  BEGIN
    IF p_password IS NULL THEN
      RETURN NULL;
    END IF;

    l_hash := DBMS_CRYPTO.HASH(
      UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8'),
      DBMS_CRYPTO.HASH_SH512
    );

    RETURN LOWER(RAWTOHEX(l_hash));
  END;

  -- Add a new customer
  PROCEDURE add_customer(
    p_name     VARCHAR2,
    p_email    VARCHAR2,
    p_phone    VARCHAR2,
    p_address  VARCHAR2,
    p_gender   VARCHAR2,
    p_username VARCHAR2 DEFAULT NULL,
    p_password VARCHAR2 DEFAULT NULL
  ) IS
    l_count INTEGER;
  BEGIN
    IF LENGTH(p_phone) > 11 THEN
      RAISE_APPLICATION_ERROR(-20002, 'Phone number cannot exceed 11 digits');
    END IF;

    IF p_username IS NOT NULL THEN
      SELECT COUNT(*) INTO l_count
      FROM maxwell_customers
      WHERE user_name = UPPER(p_username);

      IF l_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Username already exists');
      END IF;
    END IF;

    INSERT INTO maxwell_customers (
      full_name, email, phone, address, gender, user_name, password
    ) VALUES (
      UPPER(p_name), p_email, p_phone, p_address, p_gender,
      UPPER(p_username), hash_password(p_password)
    );

    COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20001, SQLERRM);
  END;

  -- Update an existing customer
  PROCEDURE update_customer(
    p_id       NUMBER,
    p_name     VARCHAR2,
    p_email    VARCHAR2,
    p_phone    VARCHAR2,
    p_address  VARCHAR2,
    p_gender   VARCHAR2,
    p_username VARCHAR2 DEFAULT NULL,
    p_password VARCHAR2 DEFAULT NULL
  ) IS
    l_count INTEGER;
  BEGIN
    IF LENGTH(p_phone) > 11 THEN
      RAISE_APPLICATION_ERROR(-20002, 'Phone number cannot exceed 11 digits');
    END IF;

    IF p_username IS NOT NULL THEN
      SELECT COUNT(*) INTO l_count
      FROM maxwell_customers
      WHERE user_name = UPPER(p_username)
        AND customer_id != p_id;

      IF l_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Username already exists for another customer');
      END IF;
    END IF;

    UPDATE maxwell_customers SET
      full_name = UPPER(p_name),
      email     = p_email,
      phone     = p_phone,
      address   = p_address,
      gender    = p_gender
    WHERE customer_id = p_id;

    IF p_username IS NOT NULL THEN
      UPDATE maxwell_customers
      SET user_name = UPPER(p_username)
      WHERE customer_id = p_id;
    END IF;

    IF p_password IS NOT NULL THEN
      UPDATE maxwell_customers
      SET password = hash_password(p_password)
      WHERE customer_id = p_id;
    END IF;

    COMMIT;
  END;

  -- Log login attempt with autonomous transaction and improved error handling
  PROCEDURE log_login_attempt(
    p_username   VARCHAR2,
    p_success    BOOLEAN,
    p_ip_address VARCHAR2 DEFAULT NULL,
    p_user_agent VARCHAR2 DEFAULT NULL
  ) IS
    PRAGMA AUTONOMOUS_TRANSACTION;
    v_status VARCHAR2(30);
  BEGIN
    v_status := CASE WHEN p_success THEN c_status_success ELSE c_status_failure END;

    INSERT INTO maxwell_login_history (
      username,
      login_time,
      status,
      ip_address,
      user_agent
    ) VALUES (
      UPPER(p_username),
      SYSTIMESTAMP,
      v_status,
      p_ip_address,
      p_user_agent
    );

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20010, 'Error in log_login_attempt: ' || SQLERRM);
  END;

  -- Authenticate user
  FUNCTION authenticate_user(
    p_username VARCHAR2,
    p_password VARCHAR2
  ) RETURN BOOLEAN IS
    l_count           INTEGER;
    l_success         BOOLEAN;
    l_hashed_password VARCHAR2(128);
  BEGIN
    l_hashed_password := hash_password(p_password);

    SELECT COUNT(*) INTO l_count
    FROM maxwell_customers
    WHERE user_name = UPPER(p_username)
      AND password = l_hashed_password;

    l_success := (l_count = 1);

    log_login_attempt(
      p_username   => p_username,
      p_success    => l_success,
      p_ip_address => NULL,
      p_user_agent => NULL
    );

    RETURN l_success;
  EXCEPTION
    WHEN OTHERS THEN
      log_login_attempt(p_username, FALSE);
      RETURN FALSE;
  END;

  -- Change password
  PROCEDURE change_password(
    p_username         VARCHAR2,
    p_current_password VARCHAR2,
    p_new_password     VARCHAR2
  ) IS
    v_count          INTEGER;
    v_hashed_current VARCHAR2(128);
    v_hashed_new     VARCHAR2(128);
  BEGIN
    v_hashed_current := hash_password(p_current_password);
    v_hashed_new     := hash_password(p_new_password);

    SELECT COUNT(*) INTO v_count
    FROM maxwell_customers
    WHERE user_name = UPPER(p_username)
      AND password = v_hashed_current;

    IF v_count = 0 THEN
      RAISE_APPLICATION_ERROR(-20001, 'Invalid current password.');
    END IF;

    UPDATE maxwell_customers
    SET password = v_hashed_new
    WHERE user_name = UPPER(p_username);

    COMMIT;
  END;

END maxwell_customer_api;
/
create or replace PACKAGE BODY maxwell_service_pkg IS

  PROCEDURE insert_service_request(
    p_request_type IN VARCHAR2
  ) IS
    v_customer_id maxwell_customers.customer_id%TYPE;
  BEGIN
    SELECT customer_id
    INTO v_customer_id
    FROM maxwell_customers
    WHERE user_name = SYS_CONTEXT('APEX$SESSION', 'APP_USER');

    INSERT INTO maxwell_service_requests (customer_id, request_type)
    VALUES (v_customer_id, p_request_type);

    COMMIT;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20001, 'Customer not found for current user');
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END insert_service_request;

  PROCEDURE delete_service_request(
    p_request_id IN maxwell_service_requests.request_id%TYPE
  ) IS
    v_customer_id maxwell_customers.customer_id%TYPE;
    v_request_owner_id maxwell_service_requests.customer_id%TYPE;
  BEGIN
    -- Get the customer ID for the current user
    SELECT customer_id
    INTO v_customer_id
    FROM maxwell_customers
    WHERE user_name = SYS_CONTEXT('APEX$SESSION', 'APP_USER');

    -- Check that the request belongs to the current user
    SELECT customer_id
    INTO v_request_owner_id
    FROM maxwell_service_requests
    WHERE request_id = p_request_id;

    IF v_request_owner_id != v_customer_id THEN
      RAISE_APPLICATION_ERROR(-20002, 'You are not authorized to delete this request');
    END IF;

    -- Delete the request
    DELETE FROM maxwell_service_requests
    WHERE request_id = p_request_id;

    COMMIT;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR(-20003, 'Request not found');
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END delete_service_request;

END maxwell_service_pkg;
/
create or replace PACKAGE BODY maxwell_transaction_api AS

  -- Deposit Procedure
  PROCEDURE deposit(
    p_acc_no    VARCHAR2,
    p_amount    NUMBER,
    p_remarks   VARCHAR2,
    p_teller_id NUMBER
  ) IS
    v_exists NUMBER;
  BEGIN
    SELECT COUNT(*) INTO v_exists 
    FROM maxwell_accounts 
    WHERE account_number = p_acc_no;

    IF v_exists = 0 THEN
      RAISE_APPLICATION_ERROR(-20002, 'Account not found for deposit');
    END IF;

    UPDATE maxwell_accounts 
    SET balance = balance + p_amount 
    WHERE account_number = p_acc_no;

    log_transaction(p_acc_no, p_amount, 'Deposit', SYSDATE, p_remarks, NULL, p_teller_id);
  END deposit;

  -- Withdraw Procedure
  PROCEDURE withdraw(
    p_acc_no    VARCHAR2,
    p_amount    NUMBER,
    p_remarks   VARCHAR2,
    p_teller_id NUMBER
  ) IS
    v_balance NUMBER;
    v_today_withdraw NUMBER := 0;
    v_withdraw_limit CONSTANT NUMBER := 3000000;
  BEGIN
    BEGIN
      SELECT balance INTO v_balance 
      FROM maxwell_accounts 
      WHERE account_number = p_acc_no;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20003, 'Account not found for withdrawal');
    END;

    IF v_balance < p_amount THEN
      RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds');
    END IF;

    SELECT NVL(SUM(amount), 0) INTO v_today_withdraw
    FROM maxwell_transactions
    WHERE account_number = p_acc_no
      AND transaction_type = 'Withdrawal'
      AND TRUNC(transaction_date) = TRUNC(SYSDATE);

    IF v_today_withdraw + p_amount > v_withdraw_limit THEN
      RAISE_APPLICATION_ERROR(-20006, 'Daily withdrawal limit of 3,000,000 exceeded');
    END IF;

    UPDATE maxwell_accounts 
    SET balance = balance - p_amount 
    WHERE account_number = p_acc_no;

    log_transaction(p_acc_no, p_amount, 'Withdrawal', SYSDATE, p_remarks, NULL, p_teller_id);
  END withdraw;

  -- Transfer Procedure
  PROCEDURE transfer(
    p_from_acc      VARCHAR2,
    p_to_acc        VARCHAR2,
    p_amount        NUMBER,
    p_transfer_type VARCHAR2
  ) IS
    v_balance NUMBER;
    v_exists NUMBER;
    v_today_transfer NUMBER := 0;
    v_transfer_limit CONSTANT NUMBER := 5000000;
  BEGIN
    -- Check sender account and balance
    BEGIN
      SELECT balance INTO v_balance
      FROM maxwell_accounts
      WHERE account_number = p_from_acc;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20003, 'Source account not found');
    END;

    IF p_from_acc = p_to_acc THEN
      RAISE_APPLICATION_ERROR(-20001, 'Cannot transfer to the same account');
    END IF;

    IF v_balance < p_amount THEN
      RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds');
    END IF;

    -- Check receiver account
    SELECT COUNT(*) INTO v_exists
    FROM maxwell_accounts
    WHERE account_number = p_to_acc;

    IF v_exists = 0 THEN
      RAISE_APPLICATION_ERROR(-20002, 'Destination account not found');
    END IF;

    -- Check today's transfer total
    SELECT NVL(SUM(amount), 0) INTO v_today_transfer
    FROM maxwell_transactions
    WHERE account_number = p_from_acc
      AND transaction_type = 'Transfer'
      AND TRUNC(transaction_date) = TRUNC(SYSDATE);

    IF v_today_transfer + p_amount > v_transfer_limit THEN
      RAISE_APPLICATION_ERROR(-20005, 'Daily transfer limit of 5,000,000 exceeded');
    END IF;

    -- Debit source
    UPDATE maxwell_accounts
    SET balance = balance - p_amount
    WHERE account_number = p_from_acc;

    log_transaction(
      p_acc_no         => p_from_acc,
      p_amount         => p_amount,
      p_type           => 'Transfer',
      p_date           => SYSDATE,
      p_remarks        => 'Transfer to ' || p_to_acc || ' (' || p_transfer_type || ')',
      p_related_acc_no => p_to_acc,
      p_teller_id      => NULL
    );

    -- Credit destination
    UPDATE maxwell_accounts
    SET balance = balance + p_amount
    WHERE account_number = p_to_acc;

    log_transaction(
      p_acc_no         => p_to_acc,
      p_amount         => p_amount,
      p_type           => 'Transfer',
      p_date           => SYSDATE,
      p_remarks        => 'Transfer from ' || p_from_acc || ' (' || p_transfer_type || ')',
      p_related_acc_no => p_from_acc,
      p_teller_id      => NULL
    );
  END transfer;

  -- Log Transaction Helper Procedure
  PROCEDURE log_transaction(
    p_acc_no           VARCHAR2,
    p_amount           NUMBER,
    p_type             VARCHAR2,
    p_date             DATE DEFAULT SYSDATE,
    p_remarks          VARCHAR2,
    p_related_acc_no   VARCHAR2 DEFAULT NULL,
    p_teller_id        NUMBER   DEFAULT NULL
  ) IS
  BEGIN
    INSERT INTO maxwell_transactions (
      account_number, transaction_type, amount, transaction_date,
      remarks, related_account, teller_id
    ) VALUES (
      p_acc_no, p_type, p_amount, p_date,
      p_remarks, p_related_acc_no, p_teller_id
    );
  END log_transaction;

END maxwell_transaction_api;
/ 